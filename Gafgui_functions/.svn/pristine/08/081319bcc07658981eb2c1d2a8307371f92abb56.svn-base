function  r = fct_real_cubic_roots(C3,C2,C1,C0)

% clc;
% clear all;
% close all;
% 
% C3 = -0.062411878459157;
% C2 = -0.370133880031138;
% C1 = -0.053849938504374;
% C0 =  0.262975165376850;
% C3=  -0.269525259041472;
% C2=   0.108518137623636;
% C1=   0.393361655533713;
% C0=  -0.078776229198692;

n3 = length(C3); n2 = length(C2); n1 = length(C1); n0 = length(C0);
n = max([n3 n2 n1 n0]);
if ((n3==n)||(n3==1))&&((n2==n)||(n2==1))&&((n1==n)||(n1==1))&&((n0==n)||(n0==1))
    
    if n3==1
        c3 = ones(n,1)*C3;
    else
        c3 = C3;
    end
    if n2==1
        c2 = ones(n,1)*C2;
    else
        c2 = C2;
    end
    if n1==1
        c1 = ones(n,1)*C1;
    else
        c1 = C1;
    end
    if n0==1
        c0 = ones(n,1)*C0;
    else
        c0 = C0;
    end
    %cases are as follows:
    %rsol0: coeff c3=c2=c1=0
    %rsol1: coeff c3=c2=0
    %rsol2: coeff c3=0
    %rsol3: otherwise
    
    k0 = intersect(find(c1==0),intersect(find(c2==0),find(c3==0)));
    k1 = intersect(intersect(find(c2==0),find(c3==0)),find(c1~=0));
    k2 = intersect(find(c3==0),find(c2~=0));
    
    %order 0
    rsol0 = zeros(n,3);
    
    %order 1
    rsol1 = [(-c0(:)./c1(:)) zeros(n,2)];
    
    %order 2
    r1 = (-c1(:) + sqrt(c1(:).^2-4*c0(:).*c2(:)))./(2*c2(:));
    r2  =(-c1(:) - sqrt(c1(:).^2-4*c0(:).*c2(:)))./(2*c2(:));
    f1 = double(~logical(max(abs( angle(r1)/pi - round(angle(r1)/pi) ),1e-10)-1e-10));
    f2 = double(~logical(max(abs( angle(r2)/pi - round(angle(r2)/pi) ),1e-10)-1e-10));
    rsol2 = [f1.*real(r1) f2.*real(r2) zeros(n,1)];
    
    %order 3
    %The initial problem is c3*z^3 + c2*z^2 +c1*z +c0 =0
    %The Wolfham method (Vieta's substitution)
    %z^3 + a2*z^2 + a1*z +a0 = 0;
    %defining z = x- 1/3*a2, p = (3*a1 - a2.^2)/3
    %and q = (9*a1.*a2-27*a0-2*a2.^3)/27
    %we get x^3 + p*x - q = 0
    %defining x = w - p./(3*w) we get
    %(w.^3).^2 -q (w.^3) -p/27 = 0
    %then the solutions of w.^3 are 1/2*q + sqrt(1/4*q.^2+1/27*p.^3) and 1/2*q - sqrt(1/4*q.^2+1/27*p.^3)
    %or solutions w.^3 are R +/- sqrt(R.^2+Q.^3)
    
    %New coefficients
    a2 =  c2(:)./c3(:);
    a1 =  c1(:)./c3(:);
    a0 =  c0(:)./c3(:);
    
    p = (3*a1 - a2.^2)/3 ;
    q = (9*a1.*a2-27*a0-2*a2.^3)/27;
    R = q/2;
    Q = p/3;
    %the positive root of w^3
    r1 = R + sqrt(R.^2+Q.^3);
    
    %we choose the positive one
    w11 = r1.^(1/3);
    w12 = r1.^(1/3)*(-0.5+sqrt(3/4)*i);
    w13 = r1.^(1/3)*(-0.5-sqrt(3/4)*i);
    
    x11 =  w11 - p./(3*w11);
    x12 =  w12 - p./(3*w12);
    x13 =  w13 - p./(3*w13);
    
    %the roots are
    r1 = x11 - 1/3*a2;
    r2 = x12 - 1/3*a2;
    r3 = x13 - 1/3*a2;
    
    % r = [r1 r2 r3];
    
    %the following is 0 if |angle(r1)/pi|>1e-10 and 1 otherwise
    f1 = double(~logical(max(abs( angle(r1)/pi - round(angle(r1)/pi) ),1e-10)-1e-10));
    f2 = double(~logical(max(abs( angle(r2)/pi - round(angle(r2)/pi) ),1e-10)-1e-10));
    f3 = double(~logical(max(abs( angle(r3)/pi - round(angle(r3)/pi) ),1e-10)-1e-10));
    
    rsol3 = [f1.*real(r1) f2.*real(r2) f3.*real(r3)];
    %According to Wolfram page, this is redundant
    % %the negative root of w^3
    % r1 = P - sqrt(P.^2+Q.^3);
    %
    % %we choose the positive one
    % w11 = r1.^(1/3);
    % w12 = r1.^(1/3)*(-0.5+sqrt(3/4)*i);
    % w13 = r1.^(1/3)*(-0.5-sqrt(3/4)*i);
    %
    % x11 =  w11 - p./(3*w11);
    % x12 =  w12 - p./(3*w12);
    % x13 =  w13 - p./(3*w13);
    %
    % %the roots are
    % r1 = x11 - 1/3*a2;
    % r2 = x12 - 1/3*a2;
    % r3 = x13 - 1/3*a2;
    %
    % r = [r1 r2 r3];
    
    r = rsol3;
    r(k0,:) = rsol0(k0,:);
    r(k1,:) = rsol1(k1,:);
    r(k2,:) = rsol2(k2,:);
    
else
    r = [];
    error('Dimensions are inconsistent');
end
