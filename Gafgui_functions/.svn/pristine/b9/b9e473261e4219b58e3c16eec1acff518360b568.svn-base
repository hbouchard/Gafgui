function handles = fct_MultichCharact3(handles);
%
% clear all;
% clear functions;
% close all;
% clc;
% fct_AddGafguiFctPath();
% handles = fct_initGafgui();
% close;

button = questdlg('Do you want to start from the beginning?','Shortcut','Yes','No','Yes') ;
if strcmp(button,'No')
    flag = 1;
else
    flag = 2;
end

if (flag==2)
    
    [posx,posy,rmat,bmat,gmat,delta,nbfilms] = fct_GetBands(handles);
%     [posx,posy,rmat,bmat,gmat] = fct_ReduceBands(posx,posy,rmat,bmat,gmat,nbfilms);
    
    %Here the value are so far unint16
    for j = 1:nbfilms
        rmat{j} = double(rmat{j});
        gmat{j} = double(gmat{j});
        bmat{j} = double(bmat{j});
    end
    
    %getting ascending order
    mux(1:nbfilms) = 0;
    for j = 1:nbfilms
        mux(j) = mean(mean(rmat{j}));
    end
    [dmb,jorder] = sort(mux);
    clear mux dmb;
    jorder = fliplr(jorder); %For OD, order is ascendent but for signal it is descendent
    for j = 1:nbfilms
        rtmp{j} = rmat{jorder(j)};  gtmp{j} = gmat{jorder(j)};  btmp{j} = bmat{jorder(j)};
    end
    rmat = rtmp; gmat = gtmp; bmat = btmp;
    clear rtmp gtmp btmp;
    
    DOSE = [];
    nprompt = ceil(nbfilms/10);
    
    button = questdlg('How do you wish to enter dose values?','Dose values','File','Manual','File') ;
    
    if strcmp(button,'Manual')
        for j = 1:nprompt
            clear prompt;
            for i= 1+10*(j-1):min(10*j,nbfilms)
                dumb = sprintf('Film #%d\nDose (CMU)',i);
                prompt{i-10*(j-1)} = dumb;
            end
            answer = inputdlg(prompt,'Dose values (CMU)',1);
            DOSE = cat(1,DOSE,str2double(answer));
        end
        DOSE = DOSE';
        %ici il devrait y avoir une facon de valider les valeurs de dose
        DOSE = abs(DOSE);
    else
        [dfilename,ipathname] = uigetfile({'*.txt'},'Choose file containing dose values');
        if ~strcmp(class(dfilename),'double')
            file = fopen(fct_makecleanfilename(ipathname,dfilename),'r');
            DOSE = fscanf(file,'%f',[1 inf]);
        else
            for j = 1:nprompt
                clear prompt;
                for i= 1+10*(j-1):min(10*j,nbfilms)
                    dumb = sprintf('Film #%d\nDose (CMU)',i);
                    prompt{i-10*(j-1)} = dumb;
                end
                answer = inputdlg(prompt,'Dose values (CMU)',1);
                DOSE = cat(1,DOSE,str2double(answer));
            end
            DOSE = DOSE';
        end
    end
    
    %save step
    button = questdlg('Do you want to save this step?','Shortcut','Yes','No','Yes') ;
    if strcmp(button,'Yes')
        %ici ajouter un while au cas ou cela ne marche pas
        [ofilename,opathname]=uiputfile({'*.mat'},'Work to save');
        filename = fct_makecleanfilename(opathname,ofilename);
        save(filename,'nbfilms','delta','rmat','gmat','bmat','DOSE');
    end
    
elseif flag == 1
    [ifilename,ipathname]=uigetfile({'*.mat'},'Work to import');
    if ~strcmp(class(ifilename),'double')
        filename = fct_makecleanfilename(ipathname,ifilename);
        load (filename);
    else
        flag = 0;
    end
end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%At this point, we have all the information
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

if flag ~=0
    %Here the value are so far unint16
    for j = 1:nbfilms
        rmat{j} = double(rmat{j});
        gmat{j} = double(gmat{j});
        bmat{j} = double(bmat{j});
    end
    [n1,m1] = size(rmat{1}); [n2,m2] = size(rmat{2});
    if n1 == n2
        stackdir = 2;
    elseif m1 == m2
        stackdir = 1;
    else
        stackdir = 0;
    end
    %      button = questdlg('Do you want to correct signal or optical density?','Correction','Signal','OD','Signal') ;
    %Here I think it is better to work with signal because it is bounded by
    %[0,65535]
    button = 'OD';
    if strcmp(button,'OD')
        ISOD = 1;
        DOSE = sort(DOSE(:));
    else
        ISOD = 0;
        DOSE = flipud(sort(DOSE(:)));
    end
    if ISOD
        for j=1:nbfilms
            rmat{j} = log10(65535./rmat{j}); gmat{j} = log10(65535./gmat{j});  bmat{j} = log10(65535./bmat{j});
        end
    end
    
    %getting ascending order (since order of OD and signal are reversed)
    mux(1:nbfilms) = 0;
    for j = 1:nbfilms
        mux(j) = mean(mean(rmat{j}));
    end
    [dmb,jorder] = sort(mux);
    clear mux dmb;
    for j = 1:nbfilms
        rtmp{j} = rmat{jorder(j)}; gtmp{j} = gmat{jorder(j)}; btmp{j} = bmat{jorder(j)};
    end
    rmat = rtmp; gmat = gtmp; bmat = btmp;
    clear rtmp gtmp btmp;

    %%%%%%%%%%%%%%%%%%
    %prepare filter to remove noize
    button = questdlg('Do you want to filter the image(s)?','Filter','Yes','No','Yes') ;
    if strcmp(button,'Yes')
        usefiltimage = 1;
    else
        usefiltimage = 0;
    end
    clear str;
    s = (1:2:25);
    for i=1:length(s)
        str{i} = sprintf('%.5f',s(i)*delta*10);
    end
    if usefiltimage
        [i,ok] = listdlg('Name','Filter width (mm)','ListString',str);
    else
        ok = 1; i = [];
    end
    if ok
        if length(i)==0
            i = 1;
        end
        kconv = s(i);
        filterimage = kconv*delta;
        Fim = ones(kconv,kconv)/sum(sum(ones(kconv,kconv)));
    else
        proceed = 0;
    end
    if usefiltimage
        for j=1:nbfilms
            r = conv2(rmat{j},Fim,'valid'); g = conv2(gmat{j},Fim,'valid'); b = conv2(bmat{j},Fim,'valid');
            rmat{j} = r;  gmat{j} = g;  bmat{j} = b;
        end
    end
    %%%%%%%%%%%%%%%%%%%%%%%%%%
    
    %Get coefficients from analysis
    [Ax,Bx,Cx,Ay,By,Cy,Az,Bz,Cz] = fct_GetCoeffMultich(rmat,gmat,bmat,DOSE,0);
    button = questdlg('Do you want to use a linear model with tau?','Linear','Yes','No','Yes') ;
    if strcmp(button,'Yes')
         Cx=Cx*0; Cy=Cy*0; Cz=Cz*0;
    end
    %display
    if 1
        figure;
        subplot(1,3,1); hold on;
        plot(DOSE,Ax,'.--r',DOSE,Ay,'.--g',DOSE,Az,'.--b');
    %     plot(DOSE,Axhat,'-r',DOSE,Ayhat,'-g',DOSE,Azhat,'-b');
        hold off;
        ylabel('Coefficient A'); xlabel('Dose (cGy)');
        subplot(1,3,2);hold on;
        plot(DOSE,Bx,'.--r',DOSE,By,'.--g',DOSE,Bz,'.--b');
    %     plot(DOSE,Bxhat,'-r',DOSE,Byhat,'-g',DOSE,Bzhat,'-b');
        ylabel('Coefficient B'); xlabel('Dose (cGy)');
        hold off;
        subplot(1,3,3);hold on;
        plot(DOSE,Cx,'.--r',DOSE,Cy,'.--g',DOSE,Cz,'.--b');
    %     plot(DOSE,Cxhat,'-r',DOSE,Cyhat,'-g',DOSE,Czhat,'-b');
        ylabel('Coefficient C'); xlabel('Dose (cGy)');
        hold off;
    end
    
    %get weights for norm function
    %HB 24 Jul 2014: weights seem to have considerable effect on the method
    %and blue is better with higher weight
    %thickness-dependent weight
    tmp = [abs(Bx) abs(By) abs(Bz)];
    %kill the red channel;
%     tmp(1) = 0;
    weights = tmp./[sum(tmp,2) sum(tmp,2) sum(tmp,2) ];
    %fit them as fct of dose
    pwr = polyfit(DOSE,weights(:,1),min(2,length(weights)-1));
    pwb = polyfit(DOSE,weights(:,3),min(2,length(weights)-1));
    pwg = [zeros(1,length(pwr)-1) 1]-pwr-pwb;
    %display
    figure; hold on;
    plot(DOSE,weights(:,1),'.r',DOSE,polyval(pwr,DOSE),'r');
    plot(DOSE,weights(:,2),'.g',DOSE,polyval(pwg,DOSE),'g');
    plot(DOSE,weights(:,3),'.b',DOSE,polyval(pwb,DOSE),'b');
    ylabel('Weights'); xlabel('Dose (cGy)');
    hold off;
    
    %make some file to store data and free workspace
    datafilename = ['tmpdata' sprintf('%d',round(rand(1,1)*1000000)) '.mat'];
    currentdir = cd;
    datafilename = fct_makecleanfilename(currentdir,datafilename);
    save(datafilename,'nbfilms','delta','rmat','gmat','bmat','DOSE');
    coeffilename = ['tmpcoef' sprintf('%d',round(rand(1,1)*1000000)) '.mat'];
    currentdir = cd;
    coeffilename = fct_makecleanfilename(currentdir,coeffilename);
    save(coeffilename,'Ax','Bx','Cx','Ay','By','Cy','Az','Bz','Cz');
    
    %free workspace
    clearvars -except datafilename coeffilename nbfilms delta DOSE ISOD weights stackdir pwr pwg pwb;
     
    %get TAU
    R = []; G = []; B = []; D = []; TAU = [];
    load(coeffilename);
    
    for j=1:nbfilms
        %%%%%%%%%%%%%%%%%%%%%%%%%%%
        load(datafilename);
        X = rmat{j};  Y = gmat{j}; Z = bmat{j};
        clear rmat gmat bmat;    
        tau = fct_EstimateTau(X,Y,Z,Ax(j),Bx(j),Cx(j),Ay(j),By(j),Cy(j),Az(j),Bz(j),Cz(j),[weights(j,1) weights(j,2) weights(j,3)]);
        [m,n] = size(tau);
        TAU = cat(1,TAU,reshape(tau,m*n,1));
        D = cat(1,D,DOSE(j)+0*reshape(tau,m*n,1));
        R = cat(1,R,reshape(X,m*n,1));
        G = cat(1,G,reshape(Y,m*n,1));
        B = cat(1,B,reshape(Z,m*n,1));    
    end
    

    varfilename = ['tmpvar' sprintf('%d',round(rand(1,1)*1000000)) '.mat'];
    currentdir = cd;
    varfilename = fct_makecleanfilename(currentdir,varfilename);
    save(varfilename,'D','TAU','R','G','B','ISOD');
    
    %freeworkspace
    clearvars -except varfilename datafilename coeffilename delta D TAU R G B ISOD nbfilms DOSE weights stackdir pwr pwg pwb;
   
    maxtau = min([ max(max(TAU)) -min(min(TAU)) 5]);
    
    %display stats on TAU
    [m,n] = size(TAU);
    t = reshape(TAU,m*n,1);
    k  = find(t>-maxtau);
    t = t(k);
    k  = find(t<maxtau);
    t = t(k);
    figure;
    hist(t,100); title(['Tau multichannel std = ' sprintf('%.2f',std(t))]);
    clear t;
    
    %display estimation
    
    %Here we know R,G,B, D and TAU
    [m,n] = size(R);
    r = reshape(R,m*n,1); clear R;
    g = reshape(G,m*n,1); clear G;
    b = reshape(B,m*n,1); clear B;
    d = reshape(D,m*n,1); clear D;
    t = reshape(TAU,m*n,1); clear TAU;
    
    k = find(t>-maxtau);
    t = t(k); r = r(k); g = g(k); b = b(k); d = d(k);
    k = find(t<maxtau);
    t = t(k); r = r(k); g = g(k); b = b(k); d = d(k);
    
    load(coeffilename);

     k = fct_indexreducerand(d,500000);
    %let's evaluate rhat, ghat and bhat
    %here the idea is not to cheat anymore: no fit with tau
    ax = [DOSE(:).^0 DOSE(:).^1 DOSE(:).^2 DOSE(:).^3 DOSE(:).^4]\Ax(:); 
    ay = [DOSE(:).^0 DOSE(:).^1 DOSE(:).^2 DOSE(:).^3 DOSE(:).^4]\Ay(:); 
    az = [DOSE(:).^0 DOSE(:).^1 DOSE(:).^2 DOSE(:).^3 DOSE(:).^4]\Az(:); 
    bx = [DOSE(:).^0 DOSE(:).^1 DOSE(:).^2 ]\Bx(:); 
    by = [DOSE(:).^0 DOSE(:).^1 DOSE(:).^2 ]\By(:); 
    bz = [DOSE(:).^0 DOSE(:).^1 DOSE(:).^2 ]\Bz(:); 
    cx = [DOSE(:).^0 ]\Cx(:); 
    cy = [DOSE(:).^0 ]\Cy(:); 
    cz = [DOSE(:).^0 ]\Cz(:); 
    
    %this is to adapt to a previous model with higher order (4th)
    pr = [ax(1) ax(2) ax(3) ax(4) ax(5) bx(1) bx(2) 0 0 cx(1) 0 0];
    pg = [ay(1) ay(2) ay(3) ay(4) ay(5) by(1) by(2) 0 0 cy(1) 0 0];
    pb = [az(1) az(2) az(3) az(4) az(5) bz(1) bz(2) 0 0 cz(1) 0 0];
    pr = pr(:); pg = pg(:); pb = pb(:); 
    
    V = [d(k).^0 d(k).^1 d(k).^2 d(k).^3 d(k).^4]; %a(D)
    V = cat(2,V,[d(k).^0.*t(k) d(k).^1.*t(k) d(k).^2.*t(k) d(k).^3.*t(k) ]);%b(D)tau
    V = cat(2,V,[d(k).^0.*t(k).^2 d(k).^1.*t(k).^2 d(k).^2.*t(k).^2 ]);%c(D)tau^2

    rhat = V*pr;
    ghat = V*pg;
    bhat = V*pb;

    figure;
    subplot(1,3,1); plot(r(k),rhat,'.r',[min(r) max(r)],[min(r) max(r)],'--k'); title('Fit red'); xlabel('Red signal');
    subplot(1,3,2); plot(g(k),ghat,'.g',[min(g) max(g)],[min(g) max(g)],'--k'); title('Fit green'); xlabel('Green signal');
    subplot(1,3,3); plot(b(k),bhat,'.b',[min(b) max(b)],[min(b) max(b)],'--k'); title('Fit blue'); xlabel('Blue signal');

    figure;
    subplot(1,3,1); plot(t(k),r(k),'.r',t(k),rhat,'.k'); title('Fit red'); xlabel('Thickness perturbation');
    subplot(1,3,2); plot(t(k),g(k),'.g',t(k),ghat,'.k'); title('Fit green'); xlabel('Thickness perturbation');
    subplot(1,3,3); plot(t(k),b(k),'.b',t(k),bhat,'.k'); title('Fit blue'); xlabel('Thickness perturbation');     

    
    %here the fit is done.

    clearvars -except pr pg pb pwr pwg pwb delta datafilename coeffilename varfilename maxtau DOSE ISOD;
    
    delete(datafilename); clear datafilename;
    delete(coeffilename); clear dcoeffilename;
    load(varfilename); 
    delete(varfilename); clear varfilename;
    if ISOD
        I(:,:,1)=uint16(10.^(-R)*65535);I(:,:,2)=uint16(10.^(-G)*65535);I(:,:,3)=uint16(10.^(-B)*65535);
    else
        I(:,:,1)=uint16(R); I(:,:,2)=uint16(G); I(:,:,3)=uint16(B);
    end
    clearvars R G B;
        
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %Now some functions
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    
    TAURANGE = [-maxtau maxtau];
    DOSERANGE = DOSE;
    tmin = min(TAURANGE);
    tmax = max(TAURANGE);
    dmin = min(DOSERANGE);
    dmax = max(DOSERANGE);
    
    d0 = @(d) min(max(d,dmin),dmax);
    
    ar = @(d) pr(1) + pr(2)*d+ pr(3)*d.^2 + pr(4)*d.^3 + pr(5)*d.^4 ;
    br = @(d) pr(6) + pr(7)*d+ pr(8)*d.^2 + pr(9)*d.^3 ;
    cr = @(d) pr(10) + pr(11)*d+ pr(12)*d.^2 ;
    
    ag = @(d) pg(1) + pg(2)*d+ pg(3)*d.^2 + pg(4)*d.^3 + pg(5)*d.^4 ;
    bg = @(d) pg(6) + pg(7)*d+ pg(8)*d.^2 + pg(9)*d.^3 ;
    cg = @(d) pg(10) + pg(11)*d+ pg(12)*d.^2 ;
    
    ab = @(d) pb(1) + pb(2)*d+ pb(3)*d.^2 + pb(4)*d.^3 + pb(5)*d.^4 ;
    bb = @(d) pb(6) + pb(7)*d+ pb(8)*d.^2 + pb(9)*d.^3 ;
    cb = @(d) pb(10) + pb(11)*d+ pb(12)*d.^2 ;
    
    wr = @(d) polyval(pwr,d0(d)); wg = @(d) polyval(pwg,d0(d)); wb = @(d) polyval(pwb,d0(d));
    
    del_ar = @(d) pr(2)+ 2*pr(3)*d + 3*pr(4)*d.^2 + 4*pr(5)*d.^3 ;
    del_br = @(d) pr(7)+ 2*pr(8)*d + 3*pr(9)*d.^2 ;
    del_cr = @(d) pr(11)+2*pr(12)*d ;
    
    del_ag = @(d) pg(2)+ 2*pg(3)*d + 3*pg(4)*d.^2 + 4*pg(5)*d.^3 ;
    del_bg = @(d) pg(7)+ 2*pg(8)*d + 3*pg(9)*d.^2 ;
    del_cg = @(d) pg(11)+2*pg(12)*d ;
    
    del_ab = @(d) pb(2)+ 2*pb(3)*d + 3*pb(4)*d.^2 + 4*pb(5)*d.^3 ;
    del_bb = @(d) pb(7)+ 2*pb(8)*d + 3*pb(9)*d.^2 ;
    del_cb = @(d) pb(11)+2*pb(12)*d ;
    
    er = @(d) del_ar(d0(d)).*(d-d0(d)) + ar(d0(d)) ;
    fr = @(d) del_br(d0(d)).*(d-d0(d)) + br(d0(d)) ;
    gr = @(d) del_cr(d0(d)).*(d-d0(d)) + cr(d0(d)) ;
    
    eg = @(d) del_ag(d0(d)).*(d-d0(d)) + ag(d0(d)) ;
    fg = @(d) del_bg(d0(d)).*(d-d0(d)) + bg(d0(d)) ;
    gg = @(d) del_cg(d0(d)).*(d-d0(d)) + cg(d0(d)) ;
    
    eb = @(d) del_ab(d0(d)).*(d-d0(d)) + ab(d0(d)) ;
    fb = @(d) del_bb(d0(d)).*(d-d0(d)) + bb(d0(d)) ;
    gb = @(d) del_cb(d0(d)).*(d-d0(d)) + cb(d0(d)) ;
    
    c0r =  @(d,r) 2*(er(d)-r).*fr(d); c1r = @(d,r) 2*(2*(er(d)-r).*gr(d)+fr(d).^2); c2r = @(d) 6*fr(d).*gr(d); c3r = @(d) 4*gr(d).^2;
    c0g =  @(d,g) 2*(eg(d)-g).*fg(d); c1g = @(d,g) 2*(2*(eg(d)-g).*gg(d)+fg(d).^2); c2g = @(d) 6*fg(d).*gg(d); c3g = @(d) 4*gg(d).^2;
    c0b =  @(d,b) 2*(eb(d)-b).*fb(d); c1b = @(d,b) 2*(2*(eb(d)-b).*gb(d)+fb(d).^2); c2b = @(d) 6*fb(d).*gb(d); c3b = @(d) 4*gb(d).^2;
    %Here we define a function that minimize eta with respect to tau. The
    %derivative with tau yields a cubic function 0 = c0 + c1*t  + c2*t^2 + c3*t^3
    c0 =  @(d,r,g,b) wr(d).*c0r(d,r) + wg(d).*c0g(d,g) + wb(d).*c0b(d,b);
    c1 =  @(d,r,g,b) wr(d).*c1r(d,r) + wg(d).*c1g(d,g) + wb(d).*c1b(d,b);
    c2 =  @(d) wr(d).*c2r(d) + wg(d).*c2g(d) + wb(d).*c2b(d);
    c3 =  @(d) wr(d).*c3r(d) + wg(d).*c3g(d) + wb(d).*c3b(d);
    
    tvalid = @(d) min([abs(fr(d)./max(1e-8,abs(gr(d)))/2) abs(fg(d)./max(1e-8,abs(gg(d)))/2) abs(fb(d)./max(1e-8,abs(gb(d)))/2)],[],2);
    t0 = @(d,t) min(max(t,-tvalid(d)),tvalid(d));
    %     t0 = @(d,t) min(max(t,tmin),tmax);
    
%     ODr = @(d,t) er(d) + fr(d).*t0(d,t)+ gr(d).*t0(d,t).^2;
%     ODg = @(d,t) eg(d) + fg(d).*t0(d,t)+ gg(d).*t0(d,t).^2;
%     ODb = @(d,t) eb(d) + fb(d).*t0(d,t)+ gb(d).*t0(d,t).^2;

    ODr = @(d,t) er(d) + fr(d).*t+ gr(d).*t.^2;
    ODg = @(d,t) eg(d) + fg(d).*t+ gg(d).*t.^2;
    ODb = @(d,t) eb(d) + fb(d).*t+ gb(d).*t.^2;
    
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %we display
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    figure; hold on;
    ezsurf(ODr,[-100,100+dmax],1.5*[-maxtau,maxtau]);
    ezsurf(ODg,[-100,100+dmax],1.5*[-maxtau,maxtau]);
    ezsurf(ODb,[-100,100+dmax],1.5*[-maxtau,maxtau]);
    hold off;
    

    [ofilename,opathname]=uiputfile({'*.3ch'},['Save mutlichannel correction method']);
    if ~strcmp(class(ofilename),'double')
        fname = fct_makecleanfilename(opathname,ofilename);
        %new method
        err = fct_WriteMultichCorr(fname,ISOD,[min(DOSE) max(DOSE)],[-maxtau maxtau],pr,pg,pb,pwr,pwg,pwb);
        if err
            error('File not written');
        end
    else
        error('Wrong file');
    end
    
   
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %TEST
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    
    imfilename = ['tmpim' sprintf('%d',round(rand(1,1)*1000000)) '.mat'];
    currentdir = cd;
    imfilename = fct_makecleanfilename(currentdir,imfilename);
    save(imfilename,'I','TAU','D');
    
    N = ceil(0.1/delta);
    fconv = ones(N,N)/N/N;
    
    test = 0;
    while test
        button = questdlg('Do you want to do a self-consistency test?','Test','Yes','No','Yes') ;
        if strcmp(button,'Yes')
            test = 1;
        else
            test = 0;
        end
        load(imfilename);
        if test
 
            figure;
            imagesc(I); title('Image');
            set(gca,'DataAspectRatio',[1 1 1]);
            impixelinfo;
            
            [dmb,rect] = imcrop;
            Icrop(:,:,1) = imcrop(I(:,:,1),rect); Icrop(:,:,2)  = imcrop(I(:,:,2),rect); Icrop(:,:,3)  = imcrop(I(:,:,3),rect);
            Dcrop  = imcrop(D,rect); TAUcrop  = imcrop(TAU,rect);
            clear I TAU D;
            
            DOSERANGE = [max(DOSE) min(DOSE)];
            TAURANGE = [-maxtau maxtau];
            %HB 23 July 2014: could these parameters have an impact?
            deltafracdose = 0.005;
            maxfracdose = 0.5;
            
            %this for is to test if you want to validate the extrapolation algorithm
            %         for extrap=0:1
            for extrap=1
                
                %                 save('tempfile.mat','Icrop','pr','pg','pb','pwr','pwg','pwb','ISOD','DOSERANGE','TAURANGE','deltafracdose','maxfracdose','extrap');
                
                [Icorr,Dsol,Tsol] = fct_MultiCorrectImage2(Icrop ,pr,pg,pb,pwr,pwg,pwb,ISOD,DOSERANGE,TAURANGE,deltafracdose,maxfracdose,extrap);
                
                Rcorr = double(Icorr(:,:,1)); Gcorr = double(Icorr(:,:,2)); Bcorr = double(Icorr(:,:,3));
                clear Icorr;
                Rcrop = double(Icrop(:,:,1)); Gcrop = double(Icrop(:,:,2)); Bcrop = double(Icrop(:,:,3));
                clear Icrop;
                
                if ISOD
                    Rcorr = log10(65535./Rcorr); Gcorr = log10(65535./Gcorr);  Bcorr = log10(65535./Bcorr);
                    Rcrop = log10(65535./Rcrop); Gcrop = log10(65535./Gcrop);  Bcrop = log10(65535./Bcrop);
                end
                
                [m,n] = size(Dsol);
                figure;
                plot(reshape(Dcrop ,m*n,1),reshape(Dsol,m*n,1),'.c', DOSERANGE,DOSERANGE,'--k' );
                figure;
                plot(reshape(TAUcrop ,m*n,1),reshape(Tsol,m*n,1),'.m',TAURANGE,TAURANGE,'--k' );
                
                %this puts the images on the same scale. it's not kosher but it
                %works
                Dmin = min(min(min(Dcrop )),min(min(Dsol)));
                Dmax = max(max(max(Dcrop )),max(max(Dsol)));
%                 Tmin = min(min(min(TAUcrop )),min(min(Tsol)));
%                 Tmax = max(max(max(TAUcrop )),max(max(Tsol)));
                
                Dcrop (1,1) = Dmin; Dcrop (end,end) = Dmax; Dsol(1,1) = Dmin; Dsol(end,end) = Dmax;
%                 TAUcrop (1,1) = Tmin; TAUcrop (end,end) = Tmax; Tsol(1,1) = Tmin; Tsol(end,end) = Tmax;
                
                figure;
                subplot(2,2,1); imagesc(conv2(Dcrop,fconv,'valid')); title('Dose');
                set(gca,'DataAspectRatio',[1 1 1]); colorbar('vert');
                subplot(2,2,2); imagesc(max(-maxtau,min(maxtau,conv2(TAUcrop,fconv,'valid')))); title('Tau');
                set(gca,'DataAspectRatio',[1 1 1]); colorbar('vert');
                subplot(2,2,3); imagesc(conv2(Dsol,fconv,'valid')); title('Dose estimation');
                set(gca,'DataAspectRatio',[1 1 1]); colorbar('vert');
                subplot(2,2,4); imagesc(max(-maxtau,min(maxtau,conv2(Tsol,fconv,'valid')))); title('Tau estimation');
                set(gca,'DataAspectRatio',[1 1 1]); colorbar('vert');
                impixelinfo;
                
                %filter to see better
                Rcrop = conv2(Rcrop,fconv,'valid'); Gcrop = conv2(Gcrop,fconv,'valid');  Bcrop = conv2(Bcrop,fconv,'valid');
                Rcorr = conv2(Rcorr,fconv,'valid'); Gcorr = conv2(Gcorr,fconv,'valid');  Bcorr = conv2(Bcorr,fconv,'valid');
                %this puts the images on the same scale. it's not kosher but it works
                Rmin = min(min(min(Rcrop )),min(min(Rcorr))); Rmax = max(max(max(Rcrop )),max(max(Rcorr)));
                Gmin = min(min(min(Gcrop )),min(min(Gcorr))); Gmax = max(max(max(Gcrop )),max(max(Gcorr)));
                Bmin = min(min(min(Bcrop )),min(min(Bcorr))); Bmax = max(max(max(Bcrop )),max(max(Bcorr)));
                Rcrop (1,1) = Rmin; Rcrop (end,end) = Rmax; Rcorr(1,1) = Rmin; Rcorr(end,end) = Rmax;
                Gcrop (1,1) = Gmin; Gcrop (end,end) = Gmax; Gcorr(1,1) = Gmin; Gcorr(end,end) = Gmax;
                Bcrop (1,1) = Bmin; Bcrop (end,end) = Bmax; Bcorr(1,1) = Bmin; Bcorr(end,end) = Bmax;
                
                figure;
                subplot(2,3,1); imagesc(Rcrop);  title('Red');
                set(gca,'DataAspectRatio',[1 1 1]); colorbar('vert');
                subplot(2,3,2); imagesc(Gcrop);  title('Green');
                set(gca,'DataAspectRatio',[1 1 1]); colorbar('vert');
                subplot(2,3,3); imagesc(Bcrop);  title('Blue');
                set(gca,'DataAspectRatio',[1 1 1]); colorbar('vert');
                impixelinfo;
                subplot(2,3,4); imagesc(Rcorr);  title('Red corrected');
                set(gca,'DataAspectRatio',[1 1 1]); colorbar('vert');
                subplot(2,3,5); imagesc(Gcorr);  title('Green corrected');
                set(gca,'DataAspectRatio',[1 1 1]); colorbar('vert');
                subplot(2,3,6); imagesc(Bcorr);  title('Blue corrected');
                set(gca,'DataAspectRatio',[1 1 1]); colorbar('vert');
                impixelinfo;
            end
        end
        clear Rcrop Gcrop Bcrop Taucrop Dcrop Rcorr Gcorr Bcorr Tsol Dsol; 
        
    end
    delete(imfilename);
end
