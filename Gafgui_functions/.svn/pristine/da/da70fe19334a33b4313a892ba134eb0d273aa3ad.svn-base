function [d,t,flag_in] = fct_GetSolutionTauDose(r,g,b,dapprox,deltafracdose,maxfracdose,DOSERANGE,TAURANGE,topt0,topt1,topt2,topt3,eta)

N = length(r);
%we want to avoid using for loops, but we can make the matrix too big;
d = [];
t = [];
kincrement  = 999;
kstart = 1;
kstop = min(N,kstart+kincrement);
flag = 1;
h = waitbar(0,'Please wait');
nflags = N/(kincrement+1);
time = 0;
while flag
    tic;
    %make a matrix of doses with number of lines long as the r and column
    %first iteration
    delta_dose=(1-maxfracdose):deltafracdose:(1+maxfracdose);
    [dummy,Ri] = meshgrid(delta_dose,r(kstart:kstop));
    [dummy,Gi] = meshgrid(delta_dose,g(kstart:kstop));
    [dummy,Bi] = meshgrid(delta_dose,b(kstart:kstop));
    [dummy,Di] = meshgrid(delta_dose,dapprox(kstart:kstop));
    %Here I did not change the name of the variable but dummy contains the dose increments
    %     Di =  max(0,Di .* dummy);
    %This gives a chance to negative values to be included
    Di = (Di+100) .* dummy-100;
    [m1,n1] = size(Di);
    if 1 %takes root closest to 0
        %elements must be reshaped to work with functions
        Ti = reshape(topt0(reshape(Di,m1*n1,1),reshape(Ri,m1*n1,1),reshape(Gi,m1*n1,1),reshape(Bi,m1*n1,1)),m1,n1);
        Ei = reshape(eta(reshape(Di,m1*n1,1),reshape(Ti,m1*n1,1),reshape(Ri,m1*n1,1),reshape(Gi,m1*n1,1),reshape(Bi,m1*n1,1)),m1,n1);
        %find min value
        [ei,di,ti] = fct_FindValuesMinRowColMatrices2(Ei,Di,Ti,2);
    else %this takes closer to tau (probably incorrect)
        %Root #1
        %elements must be reshaped to work with functions
        Ti1 = reshape(topt1(reshape(Di,m1*n1,1),reshape(Ri,m1*n1,1),reshape(Gi,m1*n1,1),reshape(Bi,m1*n1,1)),m1,n1);
        Ei1 = reshape(eta(reshape(Di,m1*n1,1),reshape(Ti1,m1*n1,1),reshape(Ri,m1*n1,1),reshape(Gi,m1*n1,1),reshape(Bi,m1*n1,1)),m1,n1);
        %find min value
        [ei1,di1,ti1] = fct_FindValuesMinRowColMatrices2(Ei1,Di,Ti1,2); clear Ei1 Ti1;
        %Root #2
        %elements must be reshaped to work with functions
        Ti2 = reshape(topt2(reshape(Di,m1*n1,1),reshape(Ri,m1*n1,1),reshape(Gi,m1*n1,1),reshape(Bi,m1*n1,1)),m1,n1);
        Ei2 = reshape(eta(reshape(Di,m1*n1,1),reshape(Ti2,m1*n1,1),reshape(Ri,m1*n1,1),reshape(Gi,m1*n1,1),reshape(Bi,m1*n1,1)),m1,n1);
        %find min value
        [ei2,di2,ti2] = fct_FindValuesMinRowColMatrices2(Ei2,Di,Ti2,2); clear Ei2 Ti2;
        %Root #3
        %elements must be reshaped to work with functions
        Ti3 = reshape(topt3(reshape(Di,m1*n1,1),reshape(Ri,m1*n1,1),reshape(Gi,m1*n1,1),reshape(Bi,m1*n1,1)),m1,n1);
        Ei3 = reshape(eta(reshape(Di,m1*n1,1),reshape(Ti3,m1*n1,1),reshape(Ri,m1*n1,1),reshape(Gi,m1*n1,1),reshape(Bi,m1*n1,1)),m1,n1);
        %find min value
        [ei3,di3,ti3] = fct_FindValuesMinRowColMatrices2(Ei3,Di,Ti3,2);  clear Ei3 Ti3;
        %Find best
        Ei = [ei1 ei2 ei3]; Di = [di1 di2 di3]; Ti = [ti1 ti2 ti3];
        [ei,di,ti] = fct_FindValuesMinRowColMatrices2(Ei,Di,Ti,2);
    end
    clear Ei Ti;
    %remove values outside DOSE
    %put results in data
    d = cat(1,d,di);
    t = cat(1,t,ti);
    %help patience
    time = time + toc;
    averagetimeperloop = time/flag/60; %in minutes
    str = sprintf('Time left = %.1f min (total duration = %.1f min)',(nflags-flag)*averagetimeperloop,nflags*averagetimeperloop);
    waitbar(flag/nflags,h,str);
    %update index range
    flag = flag+1;
    kstart = kstop + 1;
    kstop = min(N,kstart+kincrement);
    if kstart >N
        flag = 0;
    end
end
close(h);

% %the following is 0 if outside DOSE, otherwise it's 1
flag_in = double(logical(abs(min(max(DOSERANGE),d)-max(DOSERANGE)).*abs(max(min(DOSERANGE),d)-min(DOSERANGE))));
